@using Olivia.Shared.Dtos
@using Olivia.Shared.Enums
@using Olivia.Shared.Interfaces
@page "/doctors"
@inject IHttpClientFactory IHttpClientFactory
@inject IOliviaApiSettings OliviaApiSettings
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService
@using Olivia.Shared.Entities

<PageTitle>Doctor Assistant</PageTitle>

<RadzenStack class="messages-container">
    <RadzenStack class="messages-description" Gap="0.5rem" Orientation="Orientation.Horizontal"
        AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenImage Path="images/olivia_icon.svg" Style="height: 2rem;" />
            <RadzenText TextStyle="TextStyle.H5" Style="margin: 0;" Text="Doctor assistant" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenLabel Text="Doctor:" />
            <RadzenDropDown TValue="Guid" Data="@doctors" Value="@doctorId" TextProperty="FullName" ValueProperty="Id"
                ValueChanged="@(arg => CreateChatAsync(arg))" />
        </RadzenStack>
    </RadzenStack>
    <RadzenStack class="chat-messages" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack>
            @foreach (var message in messages)
            {
                @if (message.Type is MessageTypeEnum.User)
                {
                    <RadzenStack class="message-list-item-is-mine" Orientation="Orientation.Horizontal"
                        AlignItems="AlignItems.Center">
                        <RadzenLabel Style="white-space: pre-line;" Text="@message.Content" />
                        <RadzenText TextStyle="TextStyle.Caption" Text="@message.CreatedAt.ToString("HH:mm")"
                            Style="color: gray;" />
                    </RadzenStack>
                }
                else
                {
                    <RadzenStack class="message-list-item" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenLabel Style="white-space: pre-line;" Text=@message.Content />
                        <RadzenText TextStyle="TextStyle.Caption" Text="@message.CreatedAt.ToString("HH:mm")"
                            Style="color: gray;" />
                    </RadzenStack>
                }
            }
        </RadzenStack>
    </RadzenStack>
    <RadzenStack class="chat-sender" Orientation="Orientation.Horizontal">
        <RadzenTextBox @ref="rtbMessage" Placeholder="Enter here..." Style="width: 100%;" @bind-Value="newMessageBind"
            @oninput="TextAreaOnInput" @onkeyup="TextAreaKeyUp" Disabled="@(!isDoctorSelected)" />
        <RadzenButton Icon="send" Variant="Variant.Outlined" Click="@(args => SendMessage())" Disabled="@(!isDoctorSelected)" />
    </RadzenStack>
</RadzenStack>

<style>
    .messages-container {
        display: flex;
        flex-direction: column;
        height: 88vh;
    }

    .messages-description {
        width: 100%;
        height: 5rem;
        padding: 1rem;
        background-color: #97B770;
    }

    .chat-sender {
        flex-grow: 0;
        height: 2.5rem;
        margin: 1rem;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 0.5rem;
    }

    .message-list-item-is-mine {
        padding: 0.5rem;
        border-radius: 0.3rem;
        background-color: #A8CA7E;
        margin: 0.3rem;
        align-self: flex-start;
        flex-wrap: wrap;
        max-width: 70%;
    }

    .message-list-item {
        padding: 0.5rem;
        border-radius: 0.3rem;
        background-color: #CBDDB5;
        margin: 0.3rem;
        align-self: flex-end;
        flex-wrap: wrap;
        max-width: 70%;
    }
</style>

@code {
    private HttpClient? httpClient;
    private List<Message> messages = new List<Message>();
    private Guid chatId;
    private string newMessageBind = "";
    private string newMessageInput = "";
    private RadzenTextBox? rtbMessage;
    private IEnumerable<Doctor>? doctors;
    private Guid doctorId;
    private bool isDoctorSelected;
    int messageCount = 0;

    protected override async Task OnInitializedAsync()
    {
        httpClient = IHttpClientFactory.CreateClient("OliviaApi");
        await GetDoctorsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && messageCount != messages.Count)
        {
            messageCount = messages.Count;
            await JSRuntime.InvokeVoidAsync("scrollToBottom");
        }
    }

    private async Task CreateChatAsync(Guid id)
    {
        try
        {
            isDoctorSelected = false;
            doctorId = id;
            var response = await httpClient!.GetAsync(OliviaApiSettings.NewChatEndpoint);

            if (response.IsSuccessStatusCode)
            {
                var idDto = await response.Content.ReadFromJsonAsync<IdDto>();
                chatId = idDto!.Id;
                messages.Clear();
                isDoctorSelected = true;
            }
        }
        catch
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "An error occurred while creating the chat.");
        }
    }

    private async Task GetDoctorsAsync()
    {
        try
        {
            var response = await httpClient!.GetAsync(OliviaApiSettings.DoctorsEndpoint);

            if (response.IsSuccessStatusCode)
            {
                doctors = await response.Content.ReadFromJsonAsync<IEnumerable<Doctor>>();
            }

        }
        catch
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "An error occurred while getting the doctors.");
        }
    }

    private void TextAreaOnInput(ChangeEventArgs args)
    {
        newMessageInput = args.Value?.ToString() ?? "";
    }

    private async Task TextAreaKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        try
        {
            var newUserMessage = new Message
                {
                    CreatedAt = DateTime.Now,
                    Content = newMessageInput,
                    Type = MessageTypeEnum.User
                };

            var messageDto = new DoctorNewMessageDto
                {
                    ChatId = chatId,
                    Content = newMessageInput,
                    DoctorId = doctorId
                };

            newMessageInput = "";
            newMessageBind = "";
            messages.Add(newUserMessage);

            var response = await httpClient!.PostAsJsonAsync(OliviaApiSettings.NewMessageDoctorEndpoint, messageDto);

            if (response.IsSuccessStatusCode)
            {
                var messageResponse = await response.Content.ReadFromJsonAsync<AgentMessageDto>();
                var newAgentMessage = new Message
                    {
                        CreatedAt = messageResponse!.Date,
                        Content = messageResponse!.Content,
                        Type = MessageTypeEnum.Agent
                    };

                messages.Add(newAgentMessage);
            }
        }
        catch
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "An error occurred while sending the message.");
        }
    }
}